#!/usr/bin/env python3

import time
import random
import argparse
from openxc.sources.trace import TraceDataSource

class RFSignalSimulator:
    def __init__(self):
        print("OpenXC RF Signal Simulator initialized")
        
    def generate_normal_signal(self):
        """Generate normal key fob signal in 315-433 MHz range"""
        frequency = random.choice([315.7, 433.2])  # Common key fob frequencies
        signal_strength = random.randint(-80, -60)  # Normal signal range: -80 to -60 dBm
        signal_type = 0  # 0 = Normal signal
        return frequency, signal_strength, signal_type
        
    def generate_amplified_signal(self):
        """Generate amplified signal simulating a relay attack"""
        frequency = random.choice([315.7, 433.2])
        signal_strength = random.randint(-55, -30)  # Amplified signal: -55 to -30 dBm
        signal_type = 1  # 1 = Suspicious signal
        return frequency, signal_strength, signal_type

    def simulate_signals(self, duration=60, attack_probability=0.05):
        """Simulate RF signals for a specified duration"""
        start_time = time.time()
        count = 0

        print(f"Starting simulation for {duration} seconds")       
        print(f"Attack probability: {attack_probability:.1%}")     
        print("-" * 50)
        print("Timestamp | Frequency | Signal Strength | Type")    
        print("-" * 50)

        while time.time() - start_time < duration:
            # Determine if this is an attack signal
            is_attack = random.random() < attack_probability       

            if is_attack:
                frequency, signal_strength, signal_type = self.generate_amplified_signal()
            else:
                frequency, signal_strength, signal_type = self.generate_normal_signal()

            # Send the simulated signal via OpenXC
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")

            # Print the signal information
            signal_type_str = "SUSPICIOUS" if is_attack else "Normal"
            print(f"{timestamp} | {frequency:.1f} MHz | {signal_strength} dBm | {signal_type_str}")

            count += 1
            # Sleep for a random interval between 0.5 and 2 seconds
            time.sleep(random.uniform(0.5, 2.0))

        print("-" * 50)
        print(f"Simulation complete. Generated {count} signals in {duration} seconds.")

    def close(self):
        pass  # Nothing to close since we're not using TraceDataSource

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Simulate RF signals for automotive security testing")
    parser.add_argument("--duration", type=int, default=60, help="Duration of simulation in seconds")
    parser.add_argument("--attack-prob", type=float, default=0.05, help="Probability of attack signals (0-1)")
    args = parser.parse_args()

    simulator = RFSignalSimulator()
    try:
        simulator.simulate_signals(args.duration, args.attack_prob)
    finally:
        simulator.close()
